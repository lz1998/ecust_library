// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ecust_library.proto

package dto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EcustBook struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Author               string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Press                string   `protobuf:"bytes,4,opt,name=press,proto3" json:"press,omitempty"`
	Year                 int32    `protobuf:"varint,5,opt,name=year,proto3" json:"year,omitempty"`
	BookId               string   `protobuf:"bytes,6,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	Isbn                 string   `protobuf:"bytes,7,opt,name=isbn,proto3" json:"isbn,omitempty"`
	Institution          string   `protobuf:"bytes,8,opt,name=institution,proto3" json:"institution,omitempty"`
	Status               int32    `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt            int64    `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EcustBook) Reset()         { *m = EcustBook{} }
func (m *EcustBook) String() string { return proto.CompactTextString(m) }
func (*EcustBook) ProtoMessage()    {}
func (*EcustBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{0}
}
func (m *EcustBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EcustBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EcustBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EcustBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcustBook.Merge(m, src)
}
func (m *EcustBook) XXX_Size() int {
	return m.Size()
}
func (m *EcustBook) XXX_DiscardUnknown() {
	xxx_messageInfo_EcustBook.DiscardUnknown(m)
}

var xxx_messageInfo_EcustBook proto.InternalMessageInfo

func (m *EcustBook) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EcustBook) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *EcustBook) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EcustBook) GetPress() string {
	if m != nil {
		return m.Press
	}
	return ""
}

func (m *EcustBook) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *EcustBook) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *EcustBook) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *EcustBook) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *EcustBook) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EcustBook) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *EcustBook) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// ^  查询图书
// | POST: /ecust/book/list
// |
type ListBookReq struct {
	Author               []string `protobuf:"bytes,1,rep,name=author,proto3" json:"author,omitempty"`
	Title                []string `protobuf:"bytes,2,rep,name=title,proto3" json:"title,omitempty"`
	Press                []string `protobuf:"bytes,3,rep,name=press,proto3" json:"press,omitempty"`
	StartYear            int32    `protobuf:"varint,4,opt,name=start_year,json=startYear,proto3" json:"start_year,omitempty"`
	EndYear              int32    `protobuf:"varint,5,opt,name=end_year,json=endYear,proto3" json:"end_year,omitempty"`
	BookId               []string `protobuf:"bytes,6,rep,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	Isbn                 []string `protobuf:"bytes,7,rep,name=isbn,proto3" json:"isbn,omitempty"`
	Institution          []string `protobuf:"bytes,8,rep,name=institution,proto3" json:"institution,omitempty"`
	Offset               int32    `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Count                int32    `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBookReq) Reset()         { *m = ListBookReq{} }
func (m *ListBookReq) String() string { return proto.CompactTextString(m) }
func (*ListBookReq) ProtoMessage()    {}
func (*ListBookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{1}
}
func (m *ListBookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBookReq.Merge(m, src)
}
func (m *ListBookReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBookReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBookReq proto.InternalMessageInfo

func (m *ListBookReq) GetAuthor() []string {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *ListBookReq) GetTitle() []string {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ListBookReq) GetPress() []string {
	if m != nil {
		return m.Press
	}
	return nil
}

func (m *ListBookReq) GetStartYear() int32 {
	if m != nil {
		return m.StartYear
	}
	return 0
}

func (m *ListBookReq) GetEndYear() int32 {
	if m != nil {
		return m.EndYear
	}
	return 0
}

func (m *ListBookReq) GetBookId() []string {
	if m != nil {
		return m.BookId
	}
	return nil
}

func (m *ListBookReq) GetIsbn() []string {
	if m != nil {
		return m.Isbn
	}
	return nil
}

func (m *ListBookReq) GetInstitution() []string {
	if m != nil {
		return m.Institution
	}
	return nil
}

func (m *ListBookReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListBookReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ListBookResp struct {
	Books                []*EcustBook `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	Total                int32        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListBookResp) Reset()         { *m = ListBookResp{} }
func (m *ListBookResp) String() string { return proto.CompactTextString(m) }
func (*ListBookResp) ProtoMessage()    {}
func (*ListBookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{2}
}
func (m *ListBookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBookResp.Merge(m, src)
}
func (m *ListBookResp) XXX_Size() int {
	return m.Size()
}
func (m *ListBookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBookResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListBookResp proto.InternalMessageInfo

func (m *ListBookResp) GetBooks() []*EcustBook {
	if m != nil {
		return m.Books
	}
	return nil
}

func (m *ListBookResp) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// ^  添加图书
// | POST: /ecust/book/create
// |
type CreateBookReq struct {
	Books                []*EcustBook `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateBookReq) Reset()         { *m = CreateBookReq{} }
func (m *CreateBookReq) String() string { return proto.CompactTextString(m) }
func (*CreateBookReq) ProtoMessage()    {}
func (*CreateBookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{3}
}
func (m *CreateBookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBookReq.Merge(m, src)
}
func (m *CreateBookReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateBookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBookReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBookReq proto.InternalMessageInfo

func (m *CreateBookReq) GetBooks() []*EcustBook {
	if m != nil {
		return m.Books
	}
	return nil
}

type CreateBookResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBookResp) Reset()         { *m = CreateBookResp{} }
func (m *CreateBookResp) String() string { return proto.CompactTextString(m) }
func (*CreateBookResp) ProtoMessage()    {}
func (*CreateBookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{4}
}
func (m *CreateBookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBookResp.Merge(m, src)
}
func (m *CreateBookResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateBookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBookResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBookResp proto.InternalMessageInfo

// ^  修改图书
// | POST: /ecust/book/update
// |
type UpdateBookReq struct {
	Books                []*EcustBook `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateBookReq) Reset()         { *m = UpdateBookReq{} }
func (m *UpdateBookReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBookReq) ProtoMessage()    {}
func (*UpdateBookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{5}
}
func (m *UpdateBookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBookReq.Merge(m, src)
}
func (m *UpdateBookReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBookReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBookReq proto.InternalMessageInfo

func (m *UpdateBookReq) GetBooks() []*EcustBook {
	if m != nil {
		return m.Books
	}
	return nil
}

type UpdateBookResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBookResp) Reset()         { *m = UpdateBookResp{} }
func (m *UpdateBookResp) String() string { return proto.CompactTextString(m) }
func (*UpdateBookResp) ProtoMessage()    {}
func (*UpdateBookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{6}
}
func (m *UpdateBookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBookResp.Merge(m, src)
}
func (m *UpdateBookResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBookResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBookResp proto.InternalMessageInfo

type EcustAdmin struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt            int64    `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EcustAdmin) Reset()         { *m = EcustAdmin{} }
func (m *EcustAdmin) String() string { return proto.CompactTextString(m) }
func (*EcustAdmin) ProtoMessage()    {}
func (*EcustAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{7}
}
func (m *EcustAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EcustAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EcustAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EcustAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcustAdmin.Merge(m, src)
}
func (m *EcustAdmin) XXX_Size() int {
	return m.Size()
}
func (m *EcustAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_EcustAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_EcustAdmin proto.InternalMessageInfo

func (m *EcustAdmin) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EcustAdmin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EcustAdmin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *EcustAdmin) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EcustAdmin) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *EcustAdmin) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type CreateAdminReq struct {
	Admins               []*EcustAdmin `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateAdminReq) Reset()         { *m = CreateAdminReq{} }
func (m *CreateAdminReq) String() string { return proto.CompactTextString(m) }
func (*CreateAdminReq) ProtoMessage()    {}
func (*CreateAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{8}
}
func (m *CreateAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAdminReq.Merge(m, src)
}
func (m *CreateAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAdminReq proto.InternalMessageInfo

func (m *CreateAdminReq) GetAdmins() []*EcustAdmin {
	if m != nil {
		return m.Admins
	}
	return nil
}

type CreateAdminResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAdminResp) Reset()         { *m = CreateAdminResp{} }
func (m *CreateAdminResp) String() string { return proto.CompactTextString(m) }
func (*CreateAdminResp) ProtoMessage()    {}
func (*CreateAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{9}
}
func (m *CreateAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAdminResp.Merge(m, src)
}
func (m *CreateAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAdminResp proto.InternalMessageInfo

type ListAdminReq struct {
	Usernames            []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAdminReq) Reset()         { *m = ListAdminReq{} }
func (m *ListAdminReq) String() string { return proto.CompactTextString(m) }
func (*ListAdminReq) ProtoMessage()    {}
func (*ListAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{10}
}
func (m *ListAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAdminReq.Merge(m, src)
}
func (m *ListAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *ListAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAdminReq proto.InternalMessageInfo

func (m *ListAdminReq) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

type ListAdminResp struct {
	Admins               []*EcustAdmin `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListAdminResp) Reset()         { *m = ListAdminResp{} }
func (m *ListAdminResp) String() string { return proto.CompactTextString(m) }
func (*ListAdminResp) ProtoMessage()    {}
func (*ListAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{11}
}
func (m *ListAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAdminResp.Merge(m, src)
}
func (m *ListAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *ListAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAdminResp proto.InternalMessageInfo

func (m *ListAdminResp) GetAdmins() []*EcustAdmin {
	if m != nil {
		return m.Admins
	}
	return nil
}

type UpdateAdminReq struct {
	Admins               []*EcustAdmin `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateAdminReq) Reset()         { *m = UpdateAdminReq{} }
func (m *UpdateAdminReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAdminReq) ProtoMessage()    {}
func (*UpdateAdminReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{12}
}
func (m *UpdateAdminReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAdminReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAdminReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAdminReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAdminReq.Merge(m, src)
}
func (m *UpdateAdminReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAdminReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAdminReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAdminReq proto.InternalMessageInfo

func (m *UpdateAdminReq) GetAdmins() []*EcustAdmin {
	if m != nil {
		return m.Admins
	}
	return nil
}

type UpdateAdminResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAdminResp) Reset()         { *m = UpdateAdminResp{} }
func (m *UpdateAdminResp) String() string { return proto.CompactTextString(m) }
func (*UpdateAdminResp) ProtoMessage()    {}
func (*UpdateAdminResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{13}
}
func (m *UpdateAdminResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAdminResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAdminResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAdminResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAdminResp.Merge(m, src)
}
func (m *UpdateAdminResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAdminResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAdminResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAdminResp proto.InternalMessageInfo

type LoginReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{14}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResp struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResp) Reset()         { *m = LoginResp{} }
func (m *LoginResp) String() string { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()    {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fb6540b8b7cdac, []int{15}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(m, src)
}
func (m *LoginResp) XXX_Size() int {
	return m.Size()
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *LoginResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LoginResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*EcustBook)(nil), "dto.EcustBook")
	proto.RegisterType((*ListBookReq)(nil), "dto.ListBookReq")
	proto.RegisterType((*ListBookResp)(nil), "dto.ListBookResp")
	proto.RegisterType((*CreateBookReq)(nil), "dto.CreateBookReq")
	proto.RegisterType((*CreateBookResp)(nil), "dto.CreateBookResp")
	proto.RegisterType((*UpdateBookReq)(nil), "dto.UpdateBookReq")
	proto.RegisterType((*UpdateBookResp)(nil), "dto.UpdateBookResp")
	proto.RegisterType((*EcustAdmin)(nil), "dto.EcustAdmin")
	proto.RegisterType((*CreateAdminReq)(nil), "dto.CreateAdminReq")
	proto.RegisterType((*CreateAdminResp)(nil), "dto.CreateAdminResp")
	proto.RegisterType((*ListAdminReq)(nil), "dto.ListAdminReq")
	proto.RegisterType((*ListAdminResp)(nil), "dto.ListAdminResp")
	proto.RegisterType((*UpdateAdminReq)(nil), "dto.UpdateAdminReq")
	proto.RegisterType((*UpdateAdminResp)(nil), "dto.UpdateAdminResp")
	proto.RegisterType((*LoginReq)(nil), "dto.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "dto.LoginResp")
}

func init() { proto.RegisterFile("ecust_library.proto", fileDescriptor_52fb6540b8b7cdac) }

var fileDescriptor_52fb6540b8b7cdac = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x76, 0x9c, 0xc4, 0x13, 0x9a, 0xa6, 0xdb, 0x02, 0x26, 0xa2, 0x51, 0x64, 0x21, 0xe8,
	0x01, 0x15, 0xa9, 0xa8, 0x52, 0x7b, 0x6c, 0x11, 0x07, 0x50, 0x11, 0x92, 0x11, 0x87, 0x72, 0x89,
	0x9c, 0x78, 0x5b, 0xac, 0xb6, 0xde, 0xc5, 0xb3, 0x06, 0xf5, 0xc8, 0x8d, 0x47, 0xe8, 0x33, 0xf0,
	0x24, 0x1c, 0x79, 0x04, 0x54, 0x5e, 0x04, 0xed, 0x8f, 0x9d, 0x4d, 0x52, 0x22, 0xe0, 0xb6, 0xdf,
	0x37, 0x3b, 0xb3, 0xbb, 0xdf, 0x7c, 0x63, 0xc3, 0x3a, 0x9d, 0x94, 0x28, 0x46, 0xe7, 0xd9, 0xb8,
	0x48, 0x8a, 0xcb, 0x6d, 0x5e, 0x30, 0xc1, 0x88, 0x97, 0x0a, 0x16, 0x5d, 0xb9, 0x10, 0xbc, 0x90,
	0xc1, 0x43, 0xc6, 0xce, 0x48, 0x17, 0xdc, 0x2c, 0x0d, 0x9d, 0xa1, 0xb3, 0xe5, 0xc5, 0x6e, 0x96,
	0x92, 0xbb, 0xd0, 0x4c, 0x4a, 0xf1, 0x81, 0x15, 0xa1, 0x3b, 0x74, 0xb6, 0x82, 0xd8, 0x20, 0xb2,
	0x01, 0xbe, 0xc8, 0xc4, 0x39, 0x0d, 0x3d, 0x45, 0x6b, 0x20, 0x59, 0x5e, 0x50, 0xc4, 0xb0, 0xa1,
	0x59, 0x05, 0x08, 0x81, 0xc6, 0x25, 0x4d, 0x8a, 0xd0, 0x1f, 0x3a, 0x5b, 0x7e, 0xac, 0xd6, 0xe4,
	0x1e, 0xb4, 0xc6, 0x8c, 0x9d, 0x8d, 0xb2, 0x34, 0x6c, 0xea, 0xc2, 0x12, 0xbe, 0x4c, 0xe5, 0xe6,
	0x0c, 0xc7, 0x79, 0xd8, 0x52, 0xac, 0x5a, 0x93, 0x21, 0x74, 0xb2, 0x1c, 0x45, 0x26, 0x4a, 0x91,
	0xb1, 0x3c, 0x6c, 0xab, 0x90, 0x4d, 0xc9, 0x6b, 0xa2, 0x48, 0x44, 0x89, 0x61, 0xa0, 0x0e, 0x31,
	0x88, 0x6c, 0x02, 0x4c, 0x0a, 0x9a, 0x08, 0x9a, 0x8e, 0x12, 0x11, 0x82, 0x7a, 0x56, 0x60, 0x98,
	0x03, 0x21, 0xc3, 0x25, 0x4f, 0xab, 0x70, 0x47, 0x87, 0x0d, 0x73, 0x20, 0xa2, 0xaf, 0x2e, 0x74,
	0x8e, 0x32, 0xad, 0x4c, 0x4c, 0x3f, 0x5a, 0x62, 0x38, 0x43, 0xef, 0x26, 0x31, 0x5c, 0x45, 0xcf,
	0x8b, 0xe1, 0x69, 0x56, 0x8b, 0xb1, 0x09, 0x80, 0x22, 0x29, 0xc4, 0x48, 0x49, 0xd2, 0x50, 0xb7,
	0x0d, 0x14, 0x73, 0x2c, 0x75, 0xb9, 0x0f, 0x6d, 0x9a, 0xa7, 0x23, 0x4b, 0xaf, 0x16, 0xcd, 0xd3,
	0xe3, 0x05, 0xc9, 0xbc, 0x1b, 0x25, 0xf3, 0xfe, 0x2c, 0x99, 0x77, 0x83, 0x64, 0xec, 0xe4, 0x04,
	0xa9, 0xa8, 0x24, 0xd3, 0x48, 0x5e, 0x7b, 0xc2, 0xca, 0x5c, 0xab, 0xe5, 0xc7, 0x1a, 0x44, 0xaf,
	0xe0, 0xf6, 0x54, 0x09, 0xe4, 0xe4, 0x21, 0xf8, 0xf2, 0x74, 0x54, 0x4a, 0x74, 0x76, 0xba, 0xdb,
	0xa9, 0x60, 0xdb, 0xb5, 0x8d, 0x62, 0x1d, 0x54, 0xc2, 0x30, 0x91, 0x9c, 0x2b, 0xf3, 0xf8, 0xb1,
	0x06, 0xd1, 0x2e, 0xac, 0x3c, 0x57, 0x2d, 0xa8, 0x74, 0xfd, 0xab, 0x62, 0x51, 0x0f, 0xba, 0x76,
	0x1a, 0x72, 0x59, 0xe8, 0x9d, 0x6a, 0xd6, 0x3f, 0x17, 0xb2, 0xd3, 0x90, 0x47, 0xdf, 0x1c, 0x00,
	0xb5, 0xed, 0x20, 0xbd, 0xc8, 0xf2, 0x85, 0x21, 0xe8, 0x43, 0xbb, 0x44, 0x5a, 0xe4, 0xc9, 0x05,
	0x35, 0x63, 0x50, 0x63, 0x19, 0xe3, 0x09, 0xe2, 0x67, 0x56, 0xa4, 0x66, 0x16, 0x6a, 0x6c, 0xb9,
	0xb2, 0xb1, 0xc4, 0x95, 0xfe, 0x72, 0x57, 0x36, 0xe7, 0x5d, 0xb9, 0x5f, 0xe9, 0xa0, 0x2e, 0x2b,
	0x9f, 0xfd, 0x18, 0x9a, 0x89, 0x5c, 0x57, 0xef, 0x5e, 0x9d, 0xbe, 0x5b, 0xef, 0x31, 0xe1, 0x68,
	0x0d, 0x56, 0x67, 0x52, 0x91, 0x47, 0x4f, 0x74, 0x63, 0xeb, 0x5a, 0x0f, 0x20, 0xa8, 0xde, 0x86,
	0xc6, 0xe6, 0x53, 0x22, 0xda, 0x83, 0x15, 0x6b, 0x37, 0x72, 0xeb, 0x68, 0x77, 0xf9, 0xd1, 0xfb,
	0x95, 0xe8, 0xff, 0x75, 0xeb, 0x99, 0x54, 0xe4, 0xd1, 0x21, 0xb4, 0x8f, 0xd8, 0xa9, 0xae, 0x63,
	0x77, 0xc7, 0x59, 0xd2, 0x1d, 0x77, 0xb6, 0x3b, 0xd1, 0x6b, 0x08, 0x4c, 0x0d, 0xe4, 0x24, 0x84,
	0x16, 0x96, 0x93, 0x89, 0x1c, 0x57, 0x59, 0xa3, 0x1d, 0x57, 0x90, 0xf4, 0xc0, 0xbb, 0xc0, 0x53,
	0x93, 0x2d, 0x97, 0xda, 0xd5, 0x67, 0x34, 0xaf, 0xbf, 0x7d, 0x12, 0xec, 0x7c, 0xf1, 0xa0, 0x57,
	0x5b, 0xed, 0x2d, 0x2d, 0x3e, 0x65, 0x13, 0x4a, 0x9e, 0x42, 0xbb, 0x1a, 0x1b, 0xd2, 0x53, 0xef,
	0xb3, 0xbe, 0x27, 0xfd, 0xb5, 0x39, 0x06, 0x39, 0xd9, 0x05, 0x98, 0x9a, 0x9c, 0x10, 0xb5, 0x61,
	0x66, 0x58, 0xfa, 0xeb, 0x0b, 0x9c, 0x4e, 0x33, 0x96, 0x7e, 0x53, 0xa7, 0xcd, 0x8c, 0x86, 0x49,
	0x9b, 0xf5, 0x3d, 0xd9, 0x83, 0x8e, 0xe5, 0x07, 0x62, 0x97, 0xae, 0xda, 0xd4, 0xdf, 0x58, 0x24,
	0x91, 0x93, 0x1d, 0x08, 0x6a, 0x23, 0x90, 0xe9, 0x3b, 0xea, 0x2c, 0x32, 0x4f, 0xe9, 0xd3, 0xac,
	0x3e, 0x12, 0xfb, 0x46, 0x73, 0xa7, 0xcd, 0xb5, 0x9b, 0x3c, 0x02, 0x5f, 0xb5, 0x8a, 0xac, 0xe8,
	0xb2, 0xa6, 0xf5, 0xfd, 0xae, 0x0d, 0x91, 0x1f, 0xde, 0xf9, 0x7e, 0x3d, 0x70, 0x7e, 0x5c, 0x0f,
	0x9c, 0x9f, 0xd7, 0x03, 0xe7, 0xea, 0xd7, 0xe0, 0xd6, 0x7b, 0xf9, 0x8b, 0x1b, 0x37, 0xd5, 0xef,
	0xee, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x0f, 0x3f, 0x21, 0x05, 0x07, 0x00, 0x00,
}

func (m *EcustBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EcustBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EcustBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Isbn) > 0 {
		i -= len(m.Isbn)
		copy(dAtA[i:], m.Isbn)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Isbn)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Year != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Press) > 0 {
		i -= len(m.Press)
		copy(dAtA[i:], m.Press)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Press)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x50
	}
	if m.Offset != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Institution) > 0 {
		for iNdEx := len(m.Institution) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Institution[iNdEx])
			copy(dAtA[i:], m.Institution[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Institution[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Isbn) > 0 {
		for iNdEx := len(m.Isbn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Isbn[iNdEx])
			copy(dAtA[i:], m.Isbn[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Isbn[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BookId) > 0 {
		for iNdEx := len(m.BookId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BookId[iNdEx])
			copy(dAtA[i:], m.BookId[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.BookId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EndYear != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.EndYear))
		i--
		dAtA[i] = 0x28
	}
	if m.StartYear != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.StartYear))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Press) > 0 {
		for iNdEx := len(m.Press) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Press[iNdEx])
			copy(dAtA[i:], m.Press[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Press[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		for iNdEx := len(m.Title) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Title[iNdEx])
			copy(dAtA[i:], m.Title[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Title[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Author) > 0 {
		for iNdEx := len(m.Author) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Author[iNdEx])
			copy(dAtA[i:], m.Author[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Author[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListBookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBookResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBookResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateBookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateBookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBookResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBookResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBookResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBookResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *EcustAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EcustAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EcustAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEcustLibrary(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAdminReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAdminReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAdminResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAdminResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAdminReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAdminReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Usernames) > 0 {
		for iNdEx := len(m.Usernames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Usernames[iNdEx])
			copy(dAtA[i:], m.Usernames[iNdEx])
			i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Usernames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAdminResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAdminResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAdminReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAdminReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAdminReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEcustLibrary(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAdminResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAdminResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAdminResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEcustLibrary(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEcustLibrary(dAtA []byte, offset int, v uint64) int {
	offset -= sovEcustLibrary(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EcustBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Id))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Press)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	if m.Year != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Year))
	}
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Isbn)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovEcustLibrary(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovEcustLibrary(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Author) > 0 {
		for _, s := range m.Author {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if len(m.Title) > 0 {
		for _, s := range m.Title {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if len(m.Press) > 0 {
		for _, s := range m.Press {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.StartYear != 0 {
		n += 1 + sovEcustLibrary(uint64(m.StartYear))
	}
	if m.EndYear != 0 {
		n += 1 + sovEcustLibrary(uint64(m.EndYear))
	}
	if len(m.BookId) > 0 {
		for _, s := range m.BookId {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if len(m.Isbn) > 0 {
		for _, s := range m.Isbn {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if len(m.Institution) > 0 {
		for _, s := range m.Institution {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.Offset != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EcustAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEcustLibrary(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovEcustLibrary(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovEcustLibrary(uint64(m.UpdatedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Usernames) > 0 {
		for _, s := range m.Usernames {
			l = len(s)
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAdminReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovEcustLibrary(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAdminResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovEcustLibrary(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEcustLibrary(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEcustLibrary(x uint64) (n int) {
	return sovEcustLibrary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EcustBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EcustBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EcustBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Press", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Press = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isbn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isbn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = append(m.Author, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = append(m.Title, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Press", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Press = append(m.Press, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartYear", wireType)
			}
			m.StartYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartYear |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndYear", wireType)
			}
			m.EndYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndYear |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = append(m.BookId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isbn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Isbn = append(m.Isbn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = append(m.Institution, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBookResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &EcustBook{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &EcustBook{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBookResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &EcustBook{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBookResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EcustAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EcustAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EcustAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &EcustAdmin{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usernames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usernames = append(m.Usernames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &EcustAdmin{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAdminReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAdminReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAdminReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &EcustAdmin{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAdminResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAdminResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAdminResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEcustLibrary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEcustLibrary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEcustLibrary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEcustLibrary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEcustLibrary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEcustLibrary
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEcustLibrary
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEcustLibrary
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEcustLibrary        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEcustLibrary          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEcustLibrary = fmt.Errorf("proto: unexpected end of group")
)
